#!/usr/bin/perl
# TCP reverse echo service server.
# Usage: echo_srv [port]
use strict;
use warnings;

use Socket;
use IO::Handle;
use constant MY_ECHO_PORT => 2007;

my ( $bytes_in, $bytes_out ) = ( 0, 0 );

my $port        = shift || MY_ECHO_PORT;
my $protocol    = getprotobyname('tcp');

# Install INT iterrrupt handler
$SIG{INT} = sub {
    print STDERR "bytes sent = $bytes_out, bytes received = $bytes_in\n";
    exit 0;
};

# Create the socket
socket(SOCK, AF_INET, SOCK_STREAM, $protocol)   or die "socket()
                                                failed: $!";
# So we can kill and restart the server immediately
setsockopt(SOCK, SOL_SOCKET, SO_REUSEADDR, 1)   or die "Can't set
                                                SO_REUSEADDR: $!";

# Bind the socket to a local address
my $my_addr = sockaddr_in($port, INADDR_ANY);
bind(SOCK, $my_addr)    or die "bind() failed: $!";
# Make socket ready to accept incoming connections
listen(SOCK, SOMAXCONN) or die "listen() failed: $!";

warn "waiting for incoming connections on port $port...\n";

my $SESSION;
while (1) {
    next unless my $remote_addr = accept($SESSION, SOCK);
    # Unpack client's address
    my ($port, $his_addr) = sockaddr_in($remote_addr);
    warn "connection from [", inet_ntoa($his_addr), ", $port]\n";

    # Handle the connection
    $SESSION->autoflush(1);
    while (<$SESSION>) {
        $bytes_in += length($_);
        chomp;

        my $msg_out = (scalar reverse $_) . "\n";
        print $SESSION $msg_out;
        $bytes_out += length($msg_out);
    }

    warn "conenction from [", inet_ntoa($his_addr), ", $port] finished\n";
    close $SESSION;
}

# Clean up - actually never reached since the code is designed to be terminated
# by the interrupt key
close SOCK;
